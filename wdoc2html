#!/usr/bin/env python
"""
The whole point of this module is to take an asciidoc file with wdoc
(wiki) markup and output reasonable html in a straitforward way. It
should only make links out of wiki words if a document exists for that
link.
"""

from optparse import OptionParser
import os
import re
import sys
import tempfile
import string

LINE_RE = re.compile("^(\=)+$|^(\-)+$|^(\~)+$")
SPACES = ("                                                            "
          "                                                            "
          "                                                            "
          "                                                            "
          "                                                            "
          "                                                            ")
def adjust_line(line, amount):
    new_amount = amount + len(line)
    return line.rjust(new_amount, line[0])[:new_amount]

def find_first_ascii(word):
    start = 0
    for ch in word:
        if ch in string.ascii_letters:
            break
        else:
            start = start + 1

    return start

def strip_special_characters(word):
    start = find_first_ascii(word)
    # Reverse the word and find the first trailng
    end = find_first_ascii(word[::-1])

    wlen = len(word)
    nend = wlen - end

    return (word[0:start], word[nend:wlen], word[start:nend])

def resolve_link(wdir, word):
    """ If something looks like it might be a wdoc link, check to see
    if a file exists that matches that link.  if so then go aheand and
    produces asciidoc mark up to mirror the link, otherwise do
    nothing"""

    wfile = os.path.join(wdir,"%s.adoc" % word)
    if os.path.isfile(wfile):
        return "link:%s.html[%s]" % (word, word)
    else:
        return word

def process_line(line, wdir, wre):
    """ Check each word of a line in the file to see if it is a wdoc
    link """
    new_line = []
    for word in line.split():
        (pre, post, nword) = strip_special_characters(word)
        if wre.match(nword):
            new_line.append(resolve_link(wdir, nword) + post)
        else:
            new_line.append(word)
    pad = len(line) - len(line.lstrip())
    result_line = SPACES[0:pad] + " ".join(new_line)

    growth = len(result_line) - len(line)
    return (growth, result_line)

def postprocess_file(backend, converted, destination):
    """ Run asciidoc on a file that has been appropriatly preprocessed
    by wdoc """
    cmd = "asciidoc -b %s -o %s %s" % (backend, destination, converted)
    print cmd
    return os.system(cmd)

def process_file(src, tmpdir, wdoc_dir, destination, backend, wre):
    """ Do the wdoc preprocessing on links and output the actually
    asciidoc result """
    base_file_name = os.path.basename(src)
    (root_name, _) = os.path.splitext(base_file_name)
    tmpf = os.path.join(tmpdir, base_file_name)
    destf = os.path.join(destination, "%s.%s" %(root_name, backend))
    growth = 0
    with open(src, "r") as f:
        with open(tmpf, "w") as t:
            for line in f:
                if LINE_RE.match(line) and growth > 0:
                    new_line = adjust_line(line, growth)
                    growth = 0
                else:
                    (growth, new_line) = process_line(line, wdoc_dir, wre)

                t.write(new_line + "\n")

    return postprocess_file(backend, tmpf, destf)


def process_directory(src, tmpdir, wdoc_dir, destination, backend, wre):
    """ Process every asciidoc file in a directory """
    for filename in os.listdir(src):
        if filename.endswith(".adoc") or filename.endswith(".asciidoc"):
            nsrc = os.path.join(src, filename)
            result = process_file(nsrc, tmpdir, wdoc_dir,
                                  destination, backend, wre)

            if result != 0:
                return result


def main(argv=None):
    if argv is None:
        argv = sys.argv

        parser = OptionParser()
        parser.add_option("-t", "--tmpdir", dest="tmpdir",
                          default = tempfile.mkdtemp(prefix='wdoc2adoc'),
                          help = "The tmp dir to make use of", metavar="FILE")

        parser.add_option("-d", "--destination", dest="dest",
                          help = "The destination directory", metavar="FILE")

        parser.add_option("-w", "--wdoc-dir", dest="wdir",
                          help = "The root of the documentation dir",
                          metavar="FILE")

        parser.add_option("-b", "--backend", dest="backend", default = "html",
                          help = "The asciidoc backend to make use of")

        # This mirrors the default emacs wdoc minor mode regexp. If you customize
        # that regexp you should customize this one.
        parser.add_option("-r", "--re", dest="regexp",
                          default = "^[A-Z]+[a-z]*([A-Z]+[a-z]*)+$",
                          help = "The regexp used to find wikiwords")

        (options, args) = parser.parse_args(argv)

        mandatory_args = ["dest", "wdir"]
        for arg in mandatory_args:
             if not options.__dict__.has_key(arg):
                 print "mandatory option %s is missing\n" % arg
                 parser.print_help()
                 exit(-1)

        if len(args) != 2:
            print "You must specify the directory or file to run wdocs on"
            parser.print_help()
            exit(-1)


        wre = re.compile(options.regexp)
        target = args[1]

        if os.path.isdir(target):
            return process_directory(target, options.tmpdir,
                                     options.wdir, options.dest,
                                     options.backend, wre)
        else:
            return process_file(target, options.tmpdir,
                                options.wdir, options.dest,
                                options.backend, wre)

if __name__ == "__main__":
    sys.exit(main())
